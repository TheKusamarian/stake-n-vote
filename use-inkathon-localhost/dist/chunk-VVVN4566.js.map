{"version":3,"sources":["../src/helpers/getWebsiteIcon.ts","../src/helpers/getNightlyAdapter.ts"],"names":["getWebsiteIcon","origin","__async","text","appleTouchIconRegex","faviconRegex","appleTouchIconMatch","faviconMatch","e","NightlyConnectAdapter","_adapter","getNightlyConnectAdapter","appName","appIcon","appOrigin","persisted","name","icon","description"],"mappings":"wCAAO,IAAMA,EAAwBC,GAAgDC,EAAA,wBACnF,GAAI,CACF,IAAMC,EAAO,MAAO,MAAM,MAAMF,CAAM,GAAG,KAAK,EACxCG,EAAsB,uDACtBC,EAAe,+DACfC,EAAsBH,EAAK,MAAMC,CAAmB,EACpDG,EAAeJ,EAAK,MAAME,CAAY,EAC5C,OAAIC,GAAA,MAAAA,EAAsB,GACR,IAAI,IAAIA,EAAoB,CAAC,EAAGL,CAAM,EAAE,KAE/CM,GAAA,MAAAA,EAAe,GACR,IAAI,IAAIA,EAAa,CAAC,EAAGN,CAAM,EAAE,MAI9B,MAAM,MAAMA,EAAS,cAAc,GACvC,SAAW,IACnBA,EAAS,eAGlB,MACF,OAAQO,EAAA,CACN,MACF,CACF,GCxBA,OAAS,yBAAAC,MAA6B,wCAItC,IAAIC,EACSC,EAA2B,CACtCC,EACAC,EACAC,EACAC,EAAY,KACTb,EAAA,wBACH,GAAIQ,EAAU,OAAOA,EAErB,GAAI,CACF,IAAMM,EAAOJ,IAAW,2BAAQ,SAAS,UACnCK,EAAOJ,IAAY,MAAMb,EAAe,2BAAQ,MAAM,GACtDkB,EAAcJ,IAAa,2BAAQ,QAEzCJ,EAAW,MAAMD,EAAsB,MAAM,CAC3C,YAAa,CAAE,KAAAO,EAAM,KAAAC,EAAM,YAAAC,CAAY,EACvC,QAAS,WACX,CAAC,CACH,OAASV,EAAG,CACV,MACF,CAEA,OAAOE,CACT","sourcesContent":["export const getWebsiteIcon = async (origin: string): Promise<string | undefined> => {\n  try {\n    const text = await (await fetch(origin)).text()\n    const appleTouchIconRegex = /<link\\s.*?rel=\"apple-touch-icon\".*?href=\"(.*?)\".*?>/i\n    const faviconRegex = /<link\\s.*?rel=(?:\"icon\"|\"shortcut icon\").*?href=\"(.*?)\".*?>/i\n    const appleTouchIconMatch = text.match(appleTouchIconRegex)\n    const faviconMatch = text.match(faviconRegex)\n    if (appleTouchIconMatch?.[1]) {\n      const iconUrl = new URL(appleTouchIconMatch[1], origin).href\n      return iconUrl\n    } else if (faviconMatch?.[1]) {\n      const iconUrl = new URL(faviconMatch[1], origin).href\n      return iconUrl\n    }\n\n    const faviconExist = await fetch(origin + '/favicon.ico')\n    if (faviconExist.status === 200) {\n      return origin + '/favicon.ico'\n    }\n\n    return undefined\n  } catch {\n    return undefined\n  }\n}\n","import { NightlyConnectAdapter } from '@nightlylabs/wallet-selector-polkadot'\nimport { getWebsiteIcon } from './getWebsiteIcon'\n\n// In the case of the optional library, types are not available\nlet _adapter: any | undefined\nexport const getNightlyConnectAdapter = async (\n  appName?: string,\n  appIcon?: string,\n  appOrigin?: string,\n  persisted = true,\n) => {\n  if (_adapter) return _adapter\n\n  try {\n    const name = appName || window?.location.hostname\n    const icon = appIcon || (await getWebsiteIcon(window?.origin))\n    const description = appOrigin || window?.origin\n\n    _adapter = await NightlyConnectAdapter.build({\n      appMetadata: { name, icon, description },\n      network: 'AlephZero',\n    })\n  } catch (e) {\n    return undefined\n  }\n\n  return _adapter\n}\n"]}