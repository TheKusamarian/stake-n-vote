{"version":3,"sources":["../src/helpers/accountsAreEqual.ts","../src/helpers/checkIfBalanceSufficient.ts","../src/helpers/getBalance.ts","../src/helpers/formatBalance.ts","../src/helpers/contractCall.ts","../src/helpers/getAbiMessage.ts","../src/helpers/decodeOutput.ts","../src/helpers/getExtrinsicErrorMessage.ts","../src/helpers/getGasLimit.ts","../src/helpers/deployContract.ts","../src/metadata/psp22.json","../src/helpers/getAbi.ts","../src/helpers/getDeployment.ts","../src/data/PSP22_ASSETS.json","../src/assets.ts","../src/helpers/getPSP22Balances.ts","../src/helpers/initPolkadotJs.ts","../src/helpers/transferBalance.ts","../src/helpers/unwrapResult.ts"],"names":["accountsAreEqual","a1","a2","accountArraysAreEqual","i","bnToBn","BN","polkadotFormatBalance","formatBalance","api","value","options","tokenData","_a","_b","_c","_d","tokenDecimals","tokenSymbol","_options","formattedBalance","__spreadProps","__spreadValues","siUnit","toFixed","decimals","removeTrailingZeros","_value","valueDecimals","getBalance","address","formatterOptions","__async","parseBalanceData","result","watchBalance","callback","data","balanceData","freeBalance","reservedBalance","balance","miscFrozenBalance","feeFrozenBalance","reducibleBalance","freeBalanceFormatted","reservedBalanceFormatted","reducibleBalanceFormatted","balanceFormatted","checkIfBalanceSufficient","account","minBalance","accountAddress","hasZeroBalance","hasBalanceBelowMin","e","stringCamelCase","getAbiMessage","contract","method","abiMessage","m","isErr","o","isOk","getReturnTypeName","type","decodeOutput","output","decodedOutput","isError","returnType","returnTypeName","registry","r","errorText","okText","errorKey","errorValue","getExtrinsicErrorMessage","errorEvent","errorMessage","getGasLimit","_refTime","_proofSize","refTime","proofSize","getMaxGasLimit","reductionFactor","blockWeights","maxExtrinsic","maxRefTime","maxProofSize","contractCallDryRun","_0","_1","_2","_3","_4","args","gasLimit","storageDepositLimit","contractQuery","queryFn","contractTx","statusCb","dryResult","resolve","reject","isDevelopment","finalStatus","asFinalStatus","unsub","extrinsicHash","extrinsicIndex","blockHash","event","successEvent","CodePromise","deployContract","abi","wasm","constructorMethod","code","constructorFn","events","status","extrinsicFailedEvent","hash","block","blockNumber","psp22_default","psp22Abi","ContractPromise","getDeployment","deployments","contractId","networkId","deployment","getDeploymentContract","PSP22_ASSETS_default","allPSP22Assets","PSP22_TOKEN_BALANCE_SUBSCRIPTION_INTERVAL","getPSP22Balances","chainId","psp22ContractMap","slug","tokenInfo","originChain","symbol","iconPath","response","_balance","parsePSP22Balance","watchPSP22Balances","fetchTokenBalances","intervalId","ApiPromise","HttpProvider","WsProvider","cryptoWaitReady","initPolkadotJs","chain","rpcUrl","provider","transferBalance","fromAccount","toAddress","amount","allowDeath","isInBlock","transferFullBalance","keepAlive","unwrapResultOrError","outcome","unwrapResultOrDefault","defaultValue","unwrappedResult"],"mappings":"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","sourcesContent":["import { InjectedAccount } from '@polkadot/extension-inject/types'\n\n/**\n * Returns true if both given injected accounts have the same address.\n */\nexport const accountsAreEqual = (a1?: InjectedAccount, a2?: InjectedAccount) => {\n  return (a1?.address || '').toLowerCase() === (a2?.address || '').toLowerCase()\n}\n\n/**\n * Returns true if both given arrays of injected accounts contain the\n * same objects with the same addresses in the same order.\n */\nexport const accountArraysAreEqual = (a1: InjectedAccount[], a2: InjectedAccount[]) => {\n  if (a1.length !== a2.length) return false\n  return a1.every((a, i) => accountsAreEqual(a, a2[i]))\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { IKeyringPair } from '@polkadot/types/types'\nimport { BN, bnToBn } from '@polkadot/util'\nimport { getBalance } from './getBalance'\n\n/**\n * Fetches the balance of the given address and returns a boolean\n * whether this is zero or below an optionally passed minimum value.\n */\nexport const checkIfBalanceSufficient = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  minBalance?: bigint | BN | string | number,\n): Promise<boolean> => {\n  try {\n    const accountAddress = typeof account === 'string' ? account : account.address\n    const { reducibleBalance } = await getBalance(api, accountAddress)\n    const hasZeroBalance = !reducibleBalance || reducibleBalance.isZero()\n    const hasBalanceBelowMin =\n      minBalance && reducibleBalance && reducibleBalance.lte(bnToBn(minBalance))\n    return !hasZeroBalance && !hasBalanceBelowMin\n  } catch (e) {\n    console.error('Error while checking for minimum balance:', e)\n  }\n\n  return false\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { BalanceFormatterOptions, formatBalance } from './formatBalance'\n\nexport type BalanceData = {\n  tokenDecimals: number\n  tokenSymbol: string\n  freeBalance?: BN\n  freeBalanceFormatted?: string\n  reservedBalance?: BN\n  reservedBalanceFormatted?: string\n  reducibleBalance?: BN\n  reducibleBalanceFormatted?: string\n  balance?: BN\n  balanceFormatted?: string\n}\n\n/**\n * Returns the native token balance of the given `address`.\n */\nexport const getBalance = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<BalanceData> => {\n  if (!address) {\n    const { tokenDecimals, tokenSymbol } = parseBalanceData(api)\n    return {\n      tokenDecimals,\n      tokenSymbol,\n    }\n  }\n\n  // Query the chain and parse data\n  const result: any = await api.query.system.account(address)\n  const balanceData = parseBalanceData(api, result?.data, formatterOptions)\n\n  return balanceData\n}\n\n/**\n * Watches the native token balance of the given `address` and returns it in a callback.\n * The returned void function can be used to unsubscribe.\n */\nexport const watchBalance = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  callback: (data: BalanceData) => void,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<VoidFunction | null> => {\n  const { tokenDecimals, tokenSymbol } = parseBalanceData(api)\n  if (!address) {\n    callback({\n      tokenDecimals,\n      tokenSymbol,\n    })\n    return null\n  }\n\n  // Query the chain, parse data, and call the callback\n  const unsubscribe: any = await api.query.system.account(address, ({ data }: any) => {\n    const balanceData = parseBalanceData(api, data, formatterOptions)\n    callback(balanceData)\n  })\n  return unsubscribe\n}\n\n/**\n * Helper to parse the fetched balance data.\n */\nconst parseBalanceData = (\n  api: ApiPromise,\n  data?: any,\n  formatterOptions?: BalanceFormatterOptions,\n): BalanceData => {\n  // Get the token decimals and symbol\n  const tokenDecimals = api.registry.chainDecimals?.[0] || 12\n  const tokenSymbol = api.registry.chainTokens?.[0] || 'Unit'\n\n  // Get the balance\n  const freeBalance: BN = new BN(data?.free || 0)\n  const reservedBalance: BN = new BN(data?.reserved || 0)\n  const balance = reservedBalance.add(freeBalance)\n\n  // Calculate the reducible balance (see: https://substrate.stackexchange.com/a/3009/3470)\n  const miscFrozenBalance: BN = new BN(data?.miscFrozen || 0)\n  const feeFrozenBalance: BN = new BN(data?.feeFrozen || 0)\n  const reducibleBalance = freeBalance.sub(\n    miscFrozenBalance.gt(feeFrozenBalance) ? miscFrozenBalance : feeFrozenBalance,\n  )\n\n  // Format the balance\n  const freeBalanceFormatted = formatBalance(api, freeBalance, formatterOptions)\n  const reservedBalanceFormatted = formatBalance(api, reservedBalance, formatterOptions)\n  const reducibleBalanceFormatted = formatBalance(api, reducibleBalance, formatterOptions)\n  const balanceFormatted = formatBalance(api, balance, formatterOptions)\n\n  return {\n    tokenDecimals,\n    tokenSymbol,\n    freeBalance,\n    freeBalanceFormatted,\n    reservedBalance,\n    reservedBalanceFormatted,\n    reducibleBalance,\n    reducibleBalanceFormatted,\n    balance,\n    balanceFormatted,\n  }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { BN, formatBalance as polkadotFormatBalance } from '@polkadot/util'\n\nexport type PolkadotBalanceFormatterOptions = NonNullable<\n  Parameters<typeof polkadotFormatBalance>['1']\n>\n\nexport type BalanceFormatterOptions = Omit<\n  PolkadotBalanceFormatterOptions,\n  'forceUnit' | 'withZero'\n> & {\n  forceUnit?: string | undefined | false\n  fixedDecimals?: number\n  removeTrailingZeros?: boolean\n}\n\nexport type TokenData = {\n  tokenDecimals: number\n  tokenSymbol: string\n}\n\n/**\n * Improved & extended version of `formatBalance` from `@polkadot/util`.\n */\nexport const formatBalance = (\n  api: ApiPromise | undefined,\n  value?: BN,\n  options?: BalanceFormatterOptions,\n  tokenData?: TokenData,\n): string => {\n  if (!value) return ''\n\n  const tokenDecimals = api?.registry?.chainDecimals?.[0] || tokenData?.tokenDecimals || 12\n  const tokenSymbol = api?.registry?.chainTokens?.[0] || tokenData?.tokenSymbol || 'Unit'\n\n  const _options: BalanceFormatterOptions = Object.assign(\n    {\n      decimals: tokenDecimals,\n      withUnit: true,\n      forceUnit: '-',\n    } satisfies BalanceFormatterOptions,\n    options,\n  )\n\n  let formattedBalance = polkadotFormatBalance(value, {\n    ..._options,\n    withUnit: false,\n    withZero: false,\n  } as PolkadotBalanceFormatterOptions)\n\n  // Convert to fixed decimals\n  if (_options.fixedDecimals !== undefined) {\n    // Remove siUnit amd add it back later\n    let siUnit\n    if (_options.forceUnit !== '-') {\n      siUnit = formattedBalance.split(' ')[1]\n      formattedBalance = formattedBalance.split(' ')[0]\n    }\n\n    // Apply fixed decimals\n    formattedBalance = toFixed(\n      formattedBalance,\n      _options.fixedDecimals,\n      _options.removeTrailingZeros,\n    )\n\n    if (siUnit) formattedBalance = `${formattedBalance} ${siUnit}`\n  }\n\n  // Place hairline space between number and `siUnit`\n  if (_options.forceUnit !== '-') {\n    const siUnit = formattedBalance.split(' ')[1]\n    formattedBalance = formattedBalance.split(' ')[0]\n    if (siUnit) formattedBalance = `${formattedBalance}\\u200A${siUnit}`\n  }\n\n  // Add token symbol\n  if (_options.withUnit === true) {\n    formattedBalance = `${formattedBalance} ${tokenSymbol}`\n  }\n\n  return formattedBalance\n}\n\n/**\n * Helper function to convert a number (as string) to have fixed decimals.\n */\nconst toFixed = (value: string | number, decimals: number, removeTrailingZeros?: boolean) => {\n  const _value: string = typeof value === 'string' ? value : `${value}`\n\n  let valueDecimals = _value.split('.')[1] || '0'\n  valueDecimals = parseFloat(`0.${valueDecimals}`).toFixed(decimals)\n  if (removeTrailingZeros) {\n    valueDecimals = `${+valueDecimals}`\n  }\n\n  const formattedValue = valueDecimals.split('.')[1]\n    ? `${_value.split('.')[0]}.${valueDecimals.split('.')[1]}`\n    : _value.split('.')[0]\n\n  return formattedValue\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\nimport { ContractCallOutcome, ContractOptions } from '@polkadot/api-contract/types'\nimport { EventRecord } from '@polkadot/types/interfaces'\nimport { Callback, IKeyringPair, ISubmittableResult } from '@polkadot/types/types'\nimport { BN, stringCamelCase } from '@polkadot/util'\nimport { checkIfBalanceSufficient } from './checkIfBalanceSufficient'\nimport { decodeOutput } from './decodeOutput'\nimport { getAbiMessage } from './getAbiMessage'\nimport { getExtrinsicErrorMessage } from './getExtrinsicErrorMessage'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Performs a dry run for the given contract method and arguments.\n * Is used within `contractQuery` & `contractTx` for gas estimation.\n */\nexport const contractCallDryRun = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  const abiMessage = getAbiMessage(contract, method)\n  const address = (account as IKeyringPair)?.address || account\n  const { value, gasLimit, storageDepositLimit } = options\n  const result = await api.call.contractsApi.call<ContractCallOutcome>(\n    address,\n    contract.address,\n    value ?? new BN(0),\n    gasLimit ?? null,\n    storageDepositLimit ?? null,\n    abiMessage.toU8a(args),\n  )\n\n  return result\n}\n\n/**\n * Calls a given non-mutating contract method (query) with maximum possible gas limit.\n */\nexport const contractQuery = async (\n  api: ApiPromise,\n  address: string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  // HACK: This should be possible by setting the `gasLimit` to null or -1 in the future.\n  const gasLimit = getMaxGasLimit(api)\n\n  // Call actual query/tx\n  const queryFn = contract.query[stringCamelCase(method)]\n  return await queryFn(address, { ...options, gasLimit }, ...args)\n}\n\n/**\n * Calls a given mutating contract method (tx) and wraps it in a promise.\n * Before, a dry run is performed to determine the required gas & potential errors.\n */\nexport type ContractTxResult = {\n  dryResult: ContractCallOutcome\n  result?: ISubmittableResult\n  errorMessage?: ReturnType<typeof getExtrinsicErrorMessage> | 'ExtrinsicFailed'\n  errorEvent?: EventRecord\n  successEvent?: EventRecord\n  extrinsicHash?: string\n  extrinsicIndex?: number\n  blockHash?: string\n}\nexport const contractTx = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<ContractTxResult> => {\n  // Check if account has sufficient balance\n  const hasSufficientBalance = await checkIfBalanceSufficient(api, account, options?.value)\n  if (!hasSufficientBalance) {\n    return Promise.reject({\n      errorMessage: 'TokenBelowMinimum',\n    })\n  }\n\n  // Dry run to determine required gas and potential errors\n  delete options.gasLimit\n  const dryResult = await contractCallDryRun(api, account, contract, method, options, args)\n  const { isError, decodedOutput } = decodeOutput(dryResult, contract, method)\n  if (isError)\n    return Promise.reject({\n      dryResult,\n      errorMessage: decodedOutput || 'Error',\n    })\n\n  // Call actual query/tx & wrap it in a promise\n  const gasLimit = dryResult.gasRequired\n  return new Promise(async (resolve, reject) => {\n    try {\n      const isDevelopment =\n        (api.runtimeChain || '').toLowerCase() === 'development' ? 'isInBlock' : 'isFinalized'\n      const finalStatus = isDevelopment ? 'isInBlock' : 'isFinalized'\n      const asFinalStatus = isDevelopment ? 'asInBlock' : 'asFinalized'\n\n      const tx = contract.tx[stringCamelCase(method)]({ ...options, gasLimit }, ...args)\n\n      const unsub = await tx.signAndSend(account, async (result) => {\n        statusCb?.(result)\n\n        const isFinalized = result?.status?.[finalStatus]\n        if (!isFinalized) return\n\n        // Determine extrinsic and block info\n        const extrinsicHash = result.txHash.toHex()\n        const extrinsicIndex = result.txIndex\n        const blockHash = result.status[asFinalStatus].toHex()\n\n        const errorEvent = result?.events.find(({ event }) =>\n          api.events.system.ExtrinsicFailed.is(event),\n        )\n        if (errorEvent) {\n          // Reject if `ExtrinsicFailed` event was found\n          reject({\n            dryResult,\n            errorMessage: decodeOutput || 'ExtrinsicFailed',\n            errorEvent,\n            extrinsicHash,\n            extrinsicIndex,\n            blockHash,\n          })\n          unsub?.()\n        } else {\n          // Resolve succesfully otherwise\n          const successEvent = result?.events.find(({ event }) =>\n            api.events.system.ExtrinsicSuccess.is(event),\n          )\n\n          resolve({\n            dryResult,\n            result,\n            successEvent,\n            extrinsicHash,\n            extrinsicIndex,\n            blockHash,\n          })\n          unsub?.()\n        }\n      })\n    } catch (e: any) {\n      console.error('Error during contract transaction:', e)\n      reject({ errorMessage: getExtrinsicErrorMessage(e), errorEvent: e })\n    }\n  })\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { stringCamelCase } from '@polkadot/util'\n\n/**\n * Returns the ABI message for the given method name within the given contract.\n */\nexport const getAbiMessage = (contract: ContractPromise, method: string) => {\n  const abiMessage = contract.abi.messages.find(\n    (m) => stringCamelCase(m.method) === stringCamelCase(method),\n  )\n  if (!abiMessage) {\n    throw new Error(`\"${method}\" not found in Contract`)\n  }\n  return abiMessage\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { ContractExecResult } from '@polkadot/types/interfaces'\nimport { AnyJson, TypeDef } from '@polkadot/types/types'\nimport { getAbiMessage } from './getAbiMessage'\n\n/**\n * Helper types & functions\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\ntype ContractResultErr = {\n  Err: AnyJson\n}\n\ninterface ContractResultOk {\n  Ok: AnyJson\n}\n\nfunction isErr(o: ContractResultErr | ContractResultOk | AnyJson): o is ContractResultErr {\n  return typeof o === 'object' && o !== null && 'Err' in o\n}\n\nfunction isOk(o: ContractResultErr | ContractResultOk | AnyJson): o is ContractResultOk {\n  return typeof o === 'object' && o !== null && 'Ok' in o\n}\n\nfunction getReturnTypeName(type: TypeDef | null | undefined) {\n  return type?.lookupName || type?.type || ''\n}\n\n/**\n * Decodes & unwraps outputs and errors of a given result, contract, and method.\n * Parsed error message can be found in `decodedOutput` if `isError` is true.\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\nexport function decodeOutput(\n  { result }: Pick<ContractExecResult, 'result' | 'debugMessage'>,\n  contract: ContractPromise,\n  method: string,\n): {\n  output: any\n  decodedOutput: string\n  isError: boolean\n} {\n  let output\n  let decodedOutput = ''\n  let isError = true\n\n  if (result.isOk) {\n    const flags = result.asOk.flags.toHuman()\n    isError = flags.includes('Revert')\n    const abiMessage = getAbiMessage(contract, method)\n    const returnType = abiMessage.returnType\n    const returnTypeName = getReturnTypeName(returnType)\n    const registry = contract.abi.registry\n    const r = returnType\n      ? registry.createTypeUnsafe(returnTypeName, [result.asOk.data]).toHuman()\n      : '()'\n    output = isOk(r) ? r.Ok : isErr(r) ? r.Err : r\n\n    const errorText = isErr(output)\n      ? typeof output.Err === 'object'\n        ? JSON.stringify(output.Err, null, 2)\n        : output.Err?.toString() ?? 'Error'\n      : output !== 'Ok'\n        ? output?.toString() || 'Error'\n        : 'Error'\n\n    const okText = isOk(r)\n      ? typeof output === 'object'\n        ? JSON.stringify(output, null, '\\t')\n        : output?.toString() ?? '()'\n      : JSON.stringify(output, null, '\\t') ?? '()'\n\n    decodedOutput = isError ? errorText : okText\n  } else if (result.isErr) {\n    output = result.toHuman()\n\n    let errorText\n    if (\n      isErr(output) &&\n      typeof output.Err === 'object' &&\n      Object.keys(output.Err || {}).length &&\n      typeof Object.values(output.Err || {})[0] === 'string'\n    ) {\n      const [errorKey, errorValue] = Object.entries(output.Err || {})[0]\n      errorText = `${errorKey}${errorValue}`\n    }\n\n    decodedOutput = errorText || 'Error'\n  }\n\n  return {\n    output,\n    decodedOutput,\n    isError,\n  }\n}\n","/**\n * Decodes the error message from an extrinsic's error event.\n */\nexport type ExstrinsicThrowErrorMessage = 'UserCancelled' | 'TokenBelowMinimum' | 'Error'\nexport const getExtrinsicErrorMessage = (errorEvent: any): ExstrinsicThrowErrorMessage => {\n  let errorMessage: ExstrinsicThrowErrorMessage = 'Error'\n\n  // Somewhat hacky way to detect user cancellations, but all wallets throw different errors.\n  if (\n    errorEvent?.message?.match(\n      /(user reject request|cancelled|rejected by user|user rejected approval)/i,\n    )\n  ) {\n    errorMessage = 'UserCancelled'\n  }\n\n  // Decode the error code from the RPC error message.\n  const errorText = errorEvent?.toString?.()\n  const rpcErrorCode =\n    errorText && typeof errorText === 'string' ? errorText.match(/RpcError: (\\d+):/i)?.[1] : null\n  switch (rpcErrorCode) {\n    case '1010':\n      errorMessage = 'TokenBelowMinimum'\n      break\n    default:\n      break\n  }\n\n  return errorMessage\n}\n","import { ApiPromise } from '@polkadot/api'\nimport type { WeightV2 } from '@polkadot/types/interfaces'\nimport { BN, bnToBn } from '@polkadot/util'\n\n/**\n * Helper function that returns Weights V2 `gasLimit` object.\n */\nexport const getGasLimit = (api: ApiPromise, _refTime: string | BN, _proofSize: string | BN) => {\n  const refTime = bnToBn(_refTime)\n  const proofSize = bnToBn(_proofSize)\n\n  return api.registry.createType('WeightV2', {\n    refTime,\n    proofSize,\n  }) as WeightV2\n}\n\n/**\n * Helper function that returns the maximum gas limit Weights V2 object\n * for an extrinsic based on the api chain constants.\n * NOTE: It's reduced by a given factor (defaults to 80%) to avoid storage exhaust.\n */\nexport const getMaxGasLimit = (api: ApiPromise, reductionFactor = 0.8) => {\n  const blockWeights = api.consts.system.blockWeights.toPrimitive() as any\n  const maxExtrinsic = blockWeights?.perClass?.normal?.maxExtrinsic\n  const maxRefTime = maxExtrinsic?.refTime\n    ? bnToBn(maxExtrinsic.refTime)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n  const maxProofSize = maxExtrinsic?.proofSize\n    ? bnToBn(maxExtrinsic.proofSize)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n\n  return getGasLimit(api, maxRefTime, maxProofSize)\n}\n","import { DeployedContract } from '@/types'\nimport { ApiPromise } from '@polkadot/api'\nimport { CodePromise } from '@polkadot/api-contract'\nimport { ContractOptions } from '@polkadot/api-contract/types'\nimport { EventRecord, SignedBlock } from '@polkadot/types/interfaces'\nimport { IKeyringPair } from '@polkadot/types/types'\nimport { stringCamelCase } from '@polkadot/util'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Uploads & instantiates a contract on-chain.\n */\nexport const deployContract = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  abi: any,\n  wasm: Uint8Array | string | Buffer,\n  constructorMethod = 'new',\n  args = [] as unknown[],\n  options = {} as ContractOptions,\n): Promise<DeployedContract> => {\n  return new Promise<{\n    address: string\n    hash: string\n    block: SignedBlock\n    blockNumber: number\n  }>(async (resolve, reject) => {\n    const code = new CodePromise(api, abi, wasm)\n    const gasLimit = getMaxGasLimit(api)\n    const constructorFn = code.tx[stringCamelCase(constructorMethod)]\n    const unsub = await constructorFn({ gasLimit, ...options }, ...args).signAndSend(\n      account,\n      async ({ events, contract, status }: any) => {\n        if (status?.isInBlock) {\n          unsub?.()\n\n          const extrinsicFailedEvent = events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          ) as EventRecord\n          if (!!extrinsicFailedEvent || !contract?.address) {\n            console.error(\n              `Contract '${abi?.contract.name}' could not be deployed`,\n              extrinsicFailedEvent?.event?.data?.toHuman(),\n            )\n            return reject()\n          }\n\n          const hash = abi?.source.hash\n          const address = contract.address.toString()\n\n          // Determine block number\n          const blockHash = status.asInBlock.toHex()\n          const block = await api.rpc.chain.getBlock(blockHash)\n          const blockNumber = block.block.header.number.toNumber()\n\n          console.log(\n            `Contract '${abi?.contract.name}' deployed under ${address} at block #${blockNumber}`,\n          )\n\n          return resolve({\n            address,\n            hash,\n            block,\n            blockNumber,\n          })\n        }\n      },\n    )\n  })\n}\n","{\"source\":{\"hash\":\"0xdb433067f226daf1542d03cfb9fb40560381fee51ac41a1fe2344cef297f18e9\",\"language\":\"ink! 4.0.0\",\"compiler\":\"rustc 1.65.0\",\"build_info\":{\"build_mode\":\"Debug\",\"cargo_contract_version\":\"2.0.0-beta\",\"rust_toolchain\":\"stable-aarch64-apple-darwin\",\"wasm_opt_settings\":{\"keep_debug_symbols\":false,\"optimization_passes\":\"Z\"}}},\"contract\":{\"name\":\"psp22\",\"version\":\"0.9.6\",\"authors\":[\"Yonatan Hornstein <yonatan@panoramaswap.com>\"]},\"spec\":{\"constructors\":[{\"args\":[{\"label\":\"total_supply\",\"type\":{\"displayName\":[\"Balance\"],\"type\":0}},{\"label\":\"name\",\"type\":{\"displayName\":[\"Option\"],\"type\":4}},{\"label\":\"symbol\",\"type\":{\"displayName\":[\"Option\"],\"type\":4}},{\"label\":\"decimal\",\"type\":{\"displayName\":[\"u8\"],\"type\":3}}],\"label\":\"new\",\"payable\":false,\"returnType\":{\"displayName\":[\"ink_primitives\",\"ConstructorResult\"],\"type\":5},\"selector\":\"0x9bae9d5e\"}],\"events\":[],\"lang_error\":{\"displayName\":[\"ink\",\"LangError\"],\"type\":6},\"messages\":[{\"args\":[{\"label\":\"owner\",\"type\":{\"displayName\":[\"psp22_external\",\"BalanceOfInput1\"],\"type\":7}}],\"label\":\"PSP22::balance_of\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":9},\"selector\":\"0x6568382f\"},{\"args\":[{\"label\":\"from\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput1\"],\"type\":7}},{\"label\":\"to\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput2\"],\"type\":7}},{\"label\":\"value\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput3\"],\"type\":0}},{\"label\":\"data\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput4\"],\"type\":2}}],\"label\":\"PSP22::transfer_from\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0x54b3c76e\"},{\"args\":[{\"label\":\"to\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferInput1\"],\"type\":7}},{\"label\":\"value\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferInput2\"],\"type\":0}},{\"label\":\"data\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferInput3\"],\"type\":2}}],\"label\":\"PSP22::transfer\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0xdb20f9f5\"},{\"args\":[{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"ApproveInput1\"],\"type\":7}},{\"label\":\"value\",\"type\":{\"displayName\":[\"psp22_external\",\"ApproveInput2\"],\"type\":0}}],\"label\":\"PSP22::approve\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0xb20f1bbd\"},{\"args\":[],\"label\":\"PSP22::total_supply\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":9},\"selector\":\"0x162df8c2\"},{\"args\":[{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"IncreaseAllowanceInput1\"],\"type\":7}},{\"label\":\"delta_value\",\"type\":{\"displayName\":[\"psp22_external\",\"IncreaseAllowanceInput2\"],\"type\":0}}],\"label\":\"PSP22::increase_allowance\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0x96d6b57a\"},{\"args\":[{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"DecreaseAllowanceInput1\"],\"type\":7}},{\"label\":\"delta_value\",\"type\":{\"displayName\":[\"psp22_external\",\"DecreaseAllowanceInput2\"],\"type\":0}}],\"label\":\"PSP22::decrease_allowance\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0xfecb57d5\"},{\"args\":[{\"label\":\"owner\",\"type\":{\"displayName\":[\"psp22_external\",\"AllowanceInput1\"],\"type\":7}},{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"AllowanceInput2\"],\"type\":7}}],\"label\":\"PSP22::allowance\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":9},\"selector\":\"0x4d47d921\"},{\"args\":[],\"label\":\"PSP22Metadata::token_decimals\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":13},\"selector\":\"0x7271b782\"},{\"args\":[],\"label\":\"PSP22Metadata::token_name\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":14},\"selector\":\"0x3d261bd4\"},{\"args\":[],\"label\":\"PSP22Metadata::token_symbol\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":14},\"selector\":\"0x34205be5\"}]},\"storage\":{\"root\":{\"layout\":{\"struct\":{\"fields\":[{\"layout\":{\"struct\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":0}},\"name\":\"supply\"},{\"layout\":{\"root\":{\"layout\":{\"leaf\":{\"key\":\"0x1d458d3b\",\"ty\":0}},\"root_key\":\"0x1d458d3b\"}},\"name\":\"balances\"},{\"layout\":{\"root\":{\"layout\":{\"leaf\":{\"key\":\"0x0abd72fb\",\"ty\":0}},\"root_key\":\"0x0abd72fb\"}},\"name\":\"allowances\"},{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":1}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"_reserved\"}],\"name\":\"Data\"}},\"name\":\"psp22\"},{\"layout\":{\"struct\":{\"fields\":[{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":2}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"name\"},{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":2}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"symbol\"},{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":3}},\"name\":\"decimals\"},{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":1}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"_reserved\"}],\"name\":\"Data\"}},\"name\":\"metadata\"}],\"name\":\"Contract\"}},\"root_key\":\"0x00000000\"}},\"types\":[{\"id\":0,\"type\":{\"def\":{\"primitive\":\"u128\"}}},{\"id\":1,\"type\":{\"def\":{\"tuple\":[]}}},{\"id\":2,\"type\":{\"def\":{\"sequence\":{\"type\":3}}}},{\"id\":3,\"type\":{\"def\":{\"primitive\":\"u8\"}}},{\"id\":4,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"index\":0,\"name\":\"None\"},{\"fields\":[{\"type\":2}],\"index\":1,\"name\":\"Some\"}]}},\"params\":[{\"name\":\"T\",\"type\":2}],\"path\":[\"Option\"]}},{\"id\":5,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":1}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":1},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":6,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"index\":1,\"name\":\"CouldNotReadInput\"}]}},\"path\":[\"ink_primitives\",\"LangError\"]}},{\"id\":7,\"type\":{\"def\":{\"composite\":{\"fields\":[{\"type\":8,\"typeName\":\"[u8; 32]\"}]}},\"path\":[\"ink_primitives\",\"types\",\"AccountId\"]}},{\"id\":8,\"type\":{\"def\":{\"array\":{\"len\":32,\"type\":3}}}},{\"id\":9,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":0}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":0},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":10,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":11}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":11},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":11,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":1}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":12}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":1},{\"name\":\"E\",\"type\":12}],\"path\":[\"Result\"]}},{\"id\":12,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":2,\"typeName\":\"String\"}],\"index\":0,\"name\":\"Custom\"},{\"index\":1,\"name\":\"InsufficientBalance\"},{\"index\":2,\"name\":\"InsufficientAllowance\"},{\"index\":3,\"name\":\"ZeroRecipientAddress\"},{\"index\":4,\"name\":\"ZeroSenderAddress\"},{\"fields\":[{\"type\":2,\"typeName\":\"String\"}],\"index\":5,\"name\":\"SafeTransferCheckFailed\"}]}},\"path\":[\"openbrush_contracts\",\"traits\",\"errors\",\"psp22\",\"PSP22Error\"]}},{\"id\":13,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":3}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":3},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":14,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":4}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":4},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}}],\"version\":\"4\"}\n","import PSP22_Abi from '../metadata/psp22.json'\nexport const psp22Abi = PSP22_Abi as Record<string, any>\n","import { SubstrateDeployment } from '@/types'\nimport { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\n\n/**\n * Returns the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId`\n */\nexport const getDeployment = (\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  return deployments.find((deployment) => {\n    return (\n      deployment.contractId.toLowerCase() === contractId.toLowerCase() &&\n      deployment.networkId.toLowerCase() === (networkId || '').toLowerCase()\n    )\n  })\n}\n\n/**\n * Takes the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId` and creates a `ContractPromise`.\n */\nexport const getDeploymentContract = (\n  api: ApiPromise,\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  const deployment = getDeployment(deployments || [], contractId, networkId)\n  if (!deployment) return undefined\n  return new ContractPromise(api, deployment?.abi, deployment?.address)\n}\n","{\n  \"alephzero-PSP22-INW-5H4aCwLKUpVpct6XGJzDGPPXFockNKQU2JUVNgUw6BXEPzST\": {\n    \"originChain\": \"alephzero\",\n    \"slug\": \"alephzero-PSP22-INW-5H4aCwLKUpVpct6XGJzDGPPXFockNKQU2JUVNgUw6BXEPzST\",\n    \"name\": \"Ink Whale Token\",\n    \"symbol\": \"INW\",\n    \"decimals\": 12,\n    \"assetType\": \"PSP22\",\n    \"metadata\": {\n      \"contractAddress\": \"5H4aCwLKUpVpct6XGJzDGPPXFockNKQU2JUVNgUw6BXEPzST\"\n    },\n    \"iconPath\": \"https://github.com/scio-labs/use-inkathon/raw/main/assets/asset-logos/inw.png\"\n  },\n  \"alephzero-PSP22-PANX-5GSGAcvqpF5SuH2MhJ1YUdbLAbssCjeqCn2miMUCWUjnr5DQ\": {\n    \"originChain\": \"alephzero\",\n    \"slug\": \"alephzero-PSP22-PANX-5GSGAcvqpF5SuH2MhJ1YUdbLAbssCjeqCn2miMUCWUjnr5DQ\",\n    \"name\": \"Panorama Swap Token\",\n    \"symbol\": \"PANX\",\n    \"decimals\": 12,\n    \"assetType\": \"PSP22\",\n    \"metadata\": {\n      \"contractAddress\": \"5GSGAcvqpF5SuH2MhJ1YUdbLAbssCjeqCn2miMUCWUjnr5DQ\"\n    },\n    \"iconPath\": \"https://github.com/scio-labs/use-inkathon/raw/main/assets/asset-logos/panx.png\"\n  },\n  \"alephzero-testnet-PSP22-INW-5FrXTf3NXRWZ1wzq9Aka7kTGCgGotf6wifzV7RzxoCYtrjiX\": {\n    \"originChain\": \"alephzero-testnet\",\n    \"slug\": \"alephzero-testnet-PSP22-INW-5FrXTf3NXRWZ1wzq9Aka7kTGCgGotf6wifzV7RzxoCYtrjiX\",\n    \"name\": \"Ink Whale Token\",\n    \"symbol\": \"INW\",\n    \"decimals\": 12,\n    \"assetType\": \"PSP22\",\n    \"metadata\": {\n      \"contractAddress\": \"5FrXTf3NXRWZ1wzq9Aka7kTGCgGotf6wifzV7RzxoCYtrjiX\"\n    },\n    \"iconPath\": \"https://github.com/scio-labs/use-inkathon/raw/main/assets/asset-logos/inw.png\"\n  }\n}\n","import { ChainAsset } from '@/types'\nimport PSP22_ASSETS from './data/PSP22_ASSETS.json'\n\n/**\n * Acknowledgement: PSP22_ASSETS.json is inspired by Subwallet's `ChainAsset.json`\n */\nexport const allPSP22Assets = PSP22_ASSETS as Record<string, ChainAsset>\n","import { allPSP22Assets } from '@/assets'\nimport { psp22Abi } from '@/helpers/getAbi'\nimport { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { contractQuery } from './contractCall'\nimport { decodeOutput } from './decodeOutput'\nimport { BalanceFormatterOptions, formatBalance } from './formatBalance'\n\nexport type PSP22BalanceData = {\n  tokenSlug: string\n  tokenDecimals: number\n  tokenSymbol: string\n  iconPath: string\n  balance?: BN\n  balanceFormatted?: string\n}\n\n/**\n * Default refresh interval for the PSP-22 token balances.\n */\nexport const PSP22_TOKEN_BALANCE_SUBSCRIPTION_INTERVAL = 60000\n\n/**\n * Returns the PSP-22 token balances of the given `address`.\n */\nexport const getPSP22Balances = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  chainId: string,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<PSP22BalanceData[]> => {\n  const psp22ContractMap: Record<string, ContractPromise> = {}\n\n  Object.entries(allPSP22Assets).forEach(([slug, tokenInfo]) => {\n    psp22ContractMap[slug] = new ContractPromise(api, psp22Abi, tokenInfo.metadata?.contractAddress)\n  })\n\n  if (!address) {\n    const result = Object.values(allPSP22Assets)\n      .filter(({ originChain }) => originChain === chainId)\n      .map(({ slug, decimals, symbol, iconPath }) => {\n        return {\n          tokenSlug: slug,\n          tokenDecimals: decimals,\n          tokenSymbol: symbol,\n          iconPath,\n        }\n      })\n    return result\n  }\n\n  const result = await Promise.all(\n    Object.values(allPSP22Assets)\n      .filter(({ originChain }) => originChain === chainId)\n      .map(async ({ slug, decimals, symbol, iconPath }) => {\n        let balance = new BN(0)\n\n        const contract = psp22ContractMap[slug]\n        const response = await contractQuery(api, '', contract, 'psp22::balanceOf', {}, [address])\n        const { isError, decodedOutput } = decodeOutput(response, contract, 'psp22::balanceOf')\n\n        if (isError) throw new Error(decodedOutput)\n\n        const _balance = response.output?.toPrimitive() as Record<string, any>\n        balance = new BN(response.output ? (_balance.ok as string) || (_balance.Ok as string) : '0')\n\n        if (!balance) throw new Error('Invalid fetched balances')\n\n        const data = {\n          tokenDecimals: decimals,\n          tokenSymbol: symbol,\n          balance,\n        }\n\n        const balanceFormatted = parsePSP22Balance(data, formatterOptions)\n        return {\n          balanceFormatted,\n          tokenSlug: slug,\n          iconPath,\n          ...data,\n        }\n      }),\n  )\n\n  return result\n}\n\n/**\n * Watches the PSP-22 token balances of the given `address` and returns it in a callback.\n * The returned void function can be used to unsubscribe.\n */\nexport const watchPSP22Balances = (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  callback: (data: PSP22BalanceData[]) => void,\n  chainId: string,\n  formatterOptions?: BalanceFormatterOptions,\n): VoidFunction | null => {\n  const psp22ContractMap: Record<string, ContractPromise> = {}\n\n  Object.entries(allPSP22Assets).forEach(([slug, tokenInfo]) => {\n    psp22ContractMap[slug] = new ContractPromise(api, psp22Abi, tokenInfo.metadata?.contractAddress)\n  })\n\n  if (!address) {\n    const result = Object.values(allPSP22Assets)\n      .filter(({ originChain }) => originChain === chainId)\n      .map(({ slug, decimals, symbol, iconPath }) => {\n        return {\n          tokenSlug: slug,\n          tokenDecimals: decimals,\n          tokenSymbol: symbol,\n          iconPath,\n        }\n      })\n    callback(result)\n    return null\n  }\n\n  // Function to query the chain, parse data, and return promisified data\n  const fetchTokenBalances = async () =>\n    callback(\n      await Promise.all(\n        Object.values(allPSP22Assets)\n          .filter(({ originChain }) => originChain === chainId)\n          .map(async ({ slug, decimals, symbol, iconPath }) => {\n            let balance = new BN(0)\n\n            const contract = psp22ContractMap[slug]\n            const response = await contractQuery(api, '', contract, 'psp22::balanceOf', {}, [\n              address,\n            ])\n            const { isError, decodedOutput } = decodeOutput(response, contract, 'psp22::balanceOf')\n\n            if (isError) throw new Error(decodedOutput)\n\n            const _balance = response.output?.toPrimitive() as Record<string, any>\n            balance = new BN(\n              response.output ? (_balance.ok as string) || (_balance.Ok as string) : '0',\n            )\n\n            if (!balance) throw new Error('Invalid fetched balances')\n\n            const data = {\n              tokenDecimals: decimals,\n              tokenSymbol: symbol,\n              balance,\n            }\n\n            const balanceFormatted = parsePSP22Balance(data, formatterOptions)\n            return {\n              balanceFormatted,\n              tokenSlug: slug,\n              iconPath,\n              ...data,\n            }\n          }),\n      ),\n    )\n\n  fetchTokenBalances()\n\n  // Create intervalId which can be used to unsubscribe\n  const intervalId = setInterval(fetchTokenBalances, PSP22_TOKEN_BALANCE_SUBSCRIPTION_INTERVAL)\n\n  return () => {\n    clearInterval(intervalId)\n  }\n}\n\n/**\n * Helper to parse the fetched PSP22 token balance data.\n */\nexport const parsePSP22Balance = (\n  data: Omit<PSP22BalanceData, 'tokenSlug' | 'iconPath'>,\n  formatterOptions?: BalanceFormatterOptions,\n): string => {\n  // Destructure necessary fields\n  const { tokenDecimals, tokenSymbol, balance } = data\n\n  // Format the balance\n  const balanceFormatted: string = formatBalance(undefined, balance, formatterOptions, {\n    tokenDecimals,\n    tokenSymbol,\n  })\n\n  return balanceFormatted\n}\n","import { SubstrateChain } from '@/types'\nimport { ApiPromise, HttpProvider, WsProvider } from '@polkadot/api'\nimport { ApiOptions } from '@polkadot/api/types'\nimport { cryptoWaitReady } from '@polkadot/util-crypto'\n\n/**\n * Helper to initialize polkadot.js API with given chain and options.\n */\nexport const initPolkadotJs = async (\n  chain: SubstrateChain,\n  options?: Omit<ApiOptions, 'provider'>,\n): Promise<{ api: ApiPromise; provider: WsProvider | HttpProvider }> => {\n  const rpcUrl = chain.rpcUrls[0]\n  if (!rpcUrl) {\n    throw new Error('Given chain has no RPC url defined')\n  }\n\n  // Wait for crypto to be ready to prevent initialization issues\n  await cryptoWaitReady()\n\n  const provider = rpcUrl.startsWith('http') ? new HttpProvider(rpcUrl) : new WsProvider(rpcUrl)\n  const api = await ApiPromise.create({\n    provider,\n    ...options,\n  })\n\n  return { api, provider }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { SubmittableExtrinsicFunction } from '@polkadot/api/types'\nimport { AccountId, EventRecord } from '@polkadot/types/interfaces'\nimport { AnyTuple, Callback, IKeyringPair, ISubmittableResult } from '@polkadot/types/types'\nimport { BN, bnToBn } from '@polkadot/util'\nimport { checkIfBalanceSufficient } from './checkIfBalanceSufficient'\nimport { ExstrinsicThrowErrorMessage, getExtrinsicErrorMessage } from './getExtrinsicErrorMessage'\n\nexport type TransferBalanceResult = {\n  result?: ISubmittableResult\n  errorMessage?: ExstrinsicThrowErrorMessage | 'ExtrinsicFailed'\n  errorEvent?: EventRecord\n}\n\n/**\n * Transfers a given amount of tokens from one account to another.\n */\nexport const transferBalance = async (\n  api: ApiPromise,\n  fromAccount: IKeyringPair | string,\n  toAddress: string | AccountId,\n  amount: bigint | BN | string | number,\n  allowDeath?: boolean,\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<TransferBalanceResult> => {\n  const hasSufficientBalance = await checkIfBalanceSufficient(api, fromAccount, amount)\n  if (!hasSufficientBalance) {\n    return Promise.reject({ errorMessage: 'TokenBelowMinimum' } satisfies TransferBalanceResult)\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const transferFn = (api.tx.balances[\n        allowDeath ? 'transferAllowDeath' : 'transferKeepAlive'\n      ] || api.tx.balances['transfer']) as SubmittableExtrinsicFunction<'promise', AnyTuple>\n\n      const unsub = await transferFn(toAddress, bnToBn(amount)).signAndSend(\n        fromAccount,\n        (result: ISubmittableResult) => {\n          statusCb?.(result)\n          const isInBlock = result?.status?.isInBlock\n          if (!isInBlock) return\n          const errorEvent = result?.events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          )\n          if (isInBlock && errorEvent) {\n            // Reject if `ExtrinsicFailed` event was found\n            reject({ errorMessage: 'ExtrinsicFailed', errorEvent } satisfies TransferBalanceResult)\n            unsub?.()\n          } else if (isInBlock) {\n            // Otherwise resolve succesfully if transaction is in block\n            resolve({ result })\n            unsub?.()\n          }\n        },\n      )\n    } catch (e: any) {\n      console.error('Error while transferring balance:', e)\n      reject({\n        errorMessage: getExtrinsicErrorMessage(e),\n        errorEvent: e,\n      } satisfies TransferBalanceResult)\n    }\n  })\n}\n\n/**\n * Transfers all available tokens from one account to another.\n */\nexport const transferFullBalance = async (\n  api: ApiPromise,\n  fromAccount: IKeyringPair | string,\n  toAddress: string | AccountId,\n  keepAlive?: boolean,\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<TransferBalanceResult> => {\n  const hasSufficientBalance = await checkIfBalanceSufficient(api, fromAccount)\n  if (!hasSufficientBalance) {\n    return Promise.reject({ errorMessage: 'TokenBelowMinimum' } satisfies TransferBalanceResult)\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const unsub = await api.tx.balances\n        .transferAll(toAddress, !!keepAlive)\n        .signAndSend(fromAccount, (result: ISubmittableResult) => {\n          statusCb?.(result)\n          const isInBlock = result?.status?.isInBlock\n          if (!isInBlock) return\n          const errorEvent = result?.events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          )\n          if (isInBlock && errorEvent) {\n            // Reject if `ExtrinsicFailed` event was found\n            reject({ errorMessage: 'ExtrinsicFailed', errorEvent } satisfies TransferBalanceResult)\n            unsub?.()\n          } else if (isInBlock) {\n            // Otherwise resolve succesfully if transaction is in block\n            resolve({ result })\n            unsub?.()\n          }\n        })\n    } catch (e: any) {\n      console.error('Error while transferring full balance:', e)\n      reject({\n        errorMessage: getExtrinsicErrorMessage(e),\n        errorEvent: e,\n      } satisfies TransferBalanceResult)\n    }\n  })\n}\n","import { ContractCallOutcome } from '@polkadot/api-contract/types'\n\n/**\n * Unwraps a Weights V2 result type or errors if there is no 'ok' value.\n */\nexport const unwrapResultOrError = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n): T => {\n  const { result, output } = outcome\n  if (!result?.isOk || !output) {\n    throw new Error(`Error while unwrapping: ${result.toString()}`)\n  }\n  return (output.toPrimitive() as { ok: T }).ok\n}\n\n/**\n * Unwraps a Weights V2 result type or returns the given default if there is no 'ok' value.\n */\nexport const unwrapResultOrDefault = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n  defaultValue: T,\n): T => {\n  const { result, output } = outcome\n  let unwrappedResult: T = defaultValue\n  if (result?.isOk && !!output) {\n    unwrappedResult = (output.toPrimitive() as { ok: T }).ok\n  }\n  return unwrappedResult\n}\n"]}