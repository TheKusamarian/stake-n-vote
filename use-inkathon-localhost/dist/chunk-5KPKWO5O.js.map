{"version":3,"sources":["../src/types/ChainAsset.ts","../src/types/SubstrateChain.ts","../src/types/SubstrateWallet.ts","../src/types/UseInkathonProviderContext.ts"],"names":["AssetType","SubstrateExplorer","SubstrateWalletPlatform","UseInkathonErrorCode"],"mappings":"AAWO,IAAKA,OACVA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QAFEA,OAAA,ICEL,IAAKC,OACVA,EAAA,QAAU,UACVA,EAAA,WAAa,aACbA,EAAA,MAAQ,QAHEA,OAAA,ICAL,IAAKC,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,IAAM,MAHIA,OAAA,ICyBL,IAAKC,OACVA,IAAA,6CACAA,IAAA,+DACAA,IAAA,yCAHUA,OAAA","sourcesContent":["export interface ChainAsset {\n  originChain: string\n  slug: string\n  name: string\n  symbol: string\n  decimals: number\n  assetType: AssetType\n  metadata: Record<any, any> | null\n  iconPath: string\n}\n\nexport enum AssetType {\n  PSP22 = 'PSP22',\n  PSP34 = 'PSP34',\n}\n","/**\n * Substrate Chain Type\n */\nexport interface SubstrateChain {\n  network: string\n  name: string\n  rpcUrls: [string, ...string[]]\n  ss58Prefix?: number\n  explorerUrls?: Partial<Record<SubstrateExplorer, string>>\n  testnet?: boolean\n  faucetUrls?: string[]\n}\n\nexport enum SubstrateExplorer {\n  Subscan = 'subscan',\n  PolkadotJs = 'polkadotjs',\n  Other = 'other',\n}\n","export interface SubstrateWallet {\n  id: string\n  name: string\n  platforms: [SubstrateWalletPlatform, ...SubstrateWalletPlatform[]]\n  urls: {\n    website: string\n    chromeExtension?: string\n    firefoxExtension?: string\n    iosApp?: string\n    androidApp?: string\n  }\n  logoUrls: [string, ...string[]]\n}\nexport enum SubstrateWalletPlatform {\n  Browser = 'browser',\n  Android = 'android',\n  iOS = 'ios',\n}\n","import { SubstrateChain, SubstrateWallet } from '@/types'\nimport { ApiPromise, HttpProvider, WsProvider } from '@polkadot/api'\nimport { InjectedAccount, InjectedExtension } from '@polkadot/extension-inject/types'\nimport { Signer } from '@polkadot/types/types'\nimport { Dispatch, SetStateAction } from 'react'\nimport { SubstrateDeployment } from './SubstrateDeployment'\n\nexport type UseInkathonProviderContextType = {\n  isInitializing?: boolean\n  isInitialized?: boolean\n  isConnecting?: boolean\n  isConnected?: boolean\n  error?: UseInkathonError\n  activeChain?: SubstrateChain\n  switchActiveChain?: (chain: SubstrateChain) => Promise<void>\n  api?: ApiPromise\n  provider?: WsProvider | HttpProvider\n  connect?: (\n    chain?: SubstrateChain,\n    wallet?: SubstrateWallet,\n    lastActiveAccountAddress?: string,\n  ) => Promise<void>\n  disconnect?: () => void\n  accounts?: InjectedAccount[]\n  activeAccount?: InjectedAccount\n  activeExtension?: InjectedExtension\n  activeSigner?: Signer\n  setActiveAccount?: Dispatch<SetStateAction<InjectedAccount | undefined>>\n  lastActiveAccount?: InjectedAccount\n  deployments?: SubstrateDeployment[]\n  supportedWallets?: SubstrateWallet[]\n}\n\nexport interface UseInkathonError {\n  code: UseInkathonErrorCode\n  message: string\n}\n\nexport enum UseInkathonErrorCode {\n  InitializationError,\n  NoSubstrateExtensionDetected,\n  NoAccountInjected,\n}\n"]}